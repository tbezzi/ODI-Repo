<?xml version="1.0" encoding="UTF-8"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.08" IsLegacyIdCompatible="false" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="" keyVect="kC9jk0MDmGplpasphOmcvw==" exportKeySalt="baff6e5f-958b-4fff-a8bf-c84dc7cba0c7" containsCipherText="false"/>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplate">
		<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2022-01-13 05:54:13.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[fa46e622-2d00-11e6-9419-00163e1ffd72]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[U]]></Field>
	<Field name="IndIsSeeded" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLangTrans" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndReplNl" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="LangName" type="java.lang.String"><![CDATA[PYTHON]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2022-01-13 05:54:15.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="Name" type="java.lang.String"><![CDATA[SparkGroupCmd]]></Field>
	<Field name="TechnoName" type="java.lang.String"><![CDATA[SPARK_PYTHON]]></Field>
	<Field name="TemplateText" type="java.lang.String"><![CDATA[
{# IF ($[USE_DATAFRAMES] == 'true') #}
{# INCLUDE = 'SparkGroupCmdDF' #}
{# ELSE #}

$[TGT_ALIAS] = $[SRC_ALIAS].map(lambda $[SRC_RDD_SHAPE.get(0)]:Row(**{ {# IF ($[INPUT_FIELD_NAMES] != 'null') #}{# FOR ($[INPUT_FIELD_NAMES],$[INPUT_ATTR_EXPRS]) IN ($[INPUT_FIELD_NAME], $[INPUT_ATTR_EXPR]) SEP = ', ' #}"$[INPUT_ATTR_EXPR]":aggFuncExpr(lambda:$[INPUT_FIELD_NAME],None){# ENDFOR #},{# ENDIF #}
  {# IF ($[OUTPUT_ATTR_EXPRS] != 'null') #}{# FOR ($[OUTPUT_ATTR_EXPRS],$[OUTPUT_FIELD_NAMES]) IN ($[OUTPUT_ATTR_EXPR],$[OUTPUT_FIELD_NAME]) SEP = ', ' #}"$[OUTPUT_FIELD_NAME]":aggFuncExpr(lambda:$[OUTPUT_ATTR_EXPR],None){# ENDFOR #}{# ENDIF #}}));

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
print("========= %s   : $[TGT_ALIAS] apply expressions =========" % type($[TGT_ALIAS]).__name__)
{# IF ($[STREAMING_MODE] == 'true')#}
$[TGT_ALIAS].pprint()
{# ELSE #}
for line in $[TGT_ALIAS].collect():
    print line
{# ENDIF #}
{# ENDIF #}

$[TGT_ALIAS] = $[TGT_ALIAS].map($[GROUP_BY_CLAUSE])

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
print("========= %s   : $[TGT_ALIAS] group cols =========" % type($[TGT_ALIAS]).__name__)
{# IF ($[STREAMING_MODE] == 'true')#}
$[TGT_ALIAS].pprint()
{# ELSE #}
for line in $[TGT_ALIAS].collect():
    print line
{# ENDIF #}
{# ENDIF #}

{# IF ($[STREAMING_MODE] == 'true' AND $[WINDOWING] == 'true')#}
$[TGT_ALIAS] = $[TGT_ALIAS].groupByKeyAndWindow($[WINDOW_DURATION], $[SLIDE_DURATION]{# IF ($[LEVEL_PARALLELISM] > '0') #}, $[LEVEL_PARALLELISM]{# ENDIF #})
{# ELSE #}
$[TGT_ALIAS] = $[TGT_ALIAS].groupByKey({# IF ($[LEVEL_PARALLELISM] > '0') #}$[LEVEL_PARALLELISM]{# ENDIF #})
{# ENDIF #}

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
print("========= %s   : $[TGT_ALIAS] apply group by =========" % type($[TGT_ALIAS]).__name__)
{# IF ($[STREAMING_MODE] == 'true')#}
$[TGT_ALIAS].pprint()
{# ELSE #}
for line in $[TGT_ALIAS].collect():
    print line
{# ENDIF #}
{# ENDIF #}

{# IF ($[HAVING_COND] != 'null') #}
$[TGT_ALIAS] = $[TGT_ALIAS].filter(lambda (K, G): safeExpr(lambda:$[HAVING_COND],False));

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
print("========= %s   : $[TGT_ALIAS] having =========" % type($[TGT_ALIAS]).__name__)
{# IF ($[STREAMING_MODE] == 'true')#}
$[TGT_ALIAS].pprint()
{# ELSE #}
for line in $[TGT_ALIAS].collect():
    print line
{# ENDIF #}
{# ENDIF #}

{# ENDIF #}


{# IF ($[STREAMING_MODE] == 'true' AND $[STATEFUL] == 'true')#}

$[TGT_ALIAS] = $[TGT_ALIAS].map(lambda (K, G):(K, Row(**{{# IF ($[GROUP_BY_ALIASES] != 'null') #}{# IF ($[GROUP_BY_ALIASES.size()] == '1') #}"$[GROUP_BY_ALIASES.get(0)]":K{# ELSE #}{# FOR ($[GROUP_BY_ALIASES], $[GROUP_BY_INDICES]) IN ($[GROUP_BY_ALIAS], $[GROUP_BY_INDEX]) SEP = ', ' #}"$[GROUP_BY_ALIAS]":K[$[GROUP_BY_INDEX]]{# ENDFOR #}{# ENDIF #}{# ENDIF #}
{# IF ($[SIMPLE_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_1] == 'true') #},{# ENDIF #}{# FOR ($[SIMPLE_AGGR_FUNCS],$[SIMPLE_AGGR_ALIASES]) IN ($[SIMPLE_AGGR_FUNC],$[SIMPLE_AGGR_ALIAS]) SEP = ', ' #}"$[SIMPLE_AGGR_ALIAS]": $[SIMPLE_AGGR_FUNC](map((lambda row: row.$[SIMPLE_AGGR_ALIAS]), G)) {# ENDFOR #}{# ENDIF #}
{# IF ($[COMPLEX_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_2] == 'true') #},{# ENDIF #}{# FOR ($[COMPLEX_AGGR_FUNCS],$[COMPLEX_AGGR_ALIASES]) IN ($[COMPLEX_AGGR_FUNC],$[COMPLEX_AGGR_ALIAS]) SEP = ', ' #}"$[COMPLEX_AGGR_ALIAS]": $[COMPLEX_AGGR_FUNC]{# ENDFOR #}{# ENDIF #}
{# IF ($[DIRECT_MAP_ALIASES] != 'null') #}{# IF ($[COMMA_3] == 'true') #},{# ENDIF #}"$[SRC_ALIAS]:{({# FOR ($[DIRECT_MAP_ALIASES]) IN ($[DIRECT_MAP_ALIAS]) SEP = ', ' #}$[DIRECT_MAP_ALIAS]{# ENDFOR #})}": map(lambda row: {{# FOR ($[DIRECT_MAP_ALIASES]) IN ($[DIRECT_MAP_ALIAS]) SEP = ', ' #}"$[DIRECT_MAP_ALIAS]": row.$[DIRECT_MAP_ALIAS]{# ENDFOR #}}  ,G) {# ENDIF #}})));

def COUNT_STATE(x): return x[0] + x[1];

{# IF ($[RETENTION_PERIOD] == '0')#}

def updateState (v, s):
  {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print "Current value"
  print(v);
  print "State"
  print(s);
  {# ENDIF #}
  if (s is None) or not s:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "State is null"
    {# ENDIF #}
    return v[0];
  if (v is None) or not v:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "Current value is null"
    {# ENDIF #}
    return s;
  else:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "Merging current value and state"
    {# ENDIF #}
    v = v[0];
    s = s;
    data = Row(**{{# IF ($[GROUP_BY_ALIASES] != 'null') #}{# FOR ($[GROUP_BY_ALIASES]) IN ($[GROUP_BY_ALIAS]) SEP = ', ' #}"$[GROUP_BY_ALIAS]":v.$[GROUP_BY_ALIAS]{# ENDFOR #}{# ENDIF #}
    {# IF ($[SIMPLE_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_1] == 'true') #},{# ENDIF #}{# FOR ($[SIMPLE_AGGR_FUNCS],$[SIMPLE_AGGR_ALIASES]) IN ($[SIMPLE_AGGR_FUNC],$[SIMPLE_AGGR_ALIAS]) SEP = ', ' #}"$[SIMPLE_AGGR_ALIAS]":{# IF ($[SIMPLE_AGGR_FUNC] == 'COUNT') #}$[SIMPLE_AGGR_FUNC]_STATE{# ELSE #}$[SIMPLE_AGGR_FUNC]{# ENDIF #}([v.$[SIMPLE_AGGR_ALIAS], s.$[SIMPLE_AGGR_ALIAS]]){# ENDFOR #}{# ENDIF #}
    {# IF ($[COMPLEX_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_2] == 'true') #},{# ENDIF #}{# FOR ($[COMPLEX_AGGR_ALIASES]) IN ($[COMPLEX_AGGR_ALIAS]) SEP = ', ' #}"$[COMPLEX_AGGR_ALIAS]":v.$[COMPLEX_AGGR_ALIAS]{# ENDFOR #}{# ENDIF #}
    {# IF ($[DIRECT_MAP_ALIASES] != 'null') #}{# IF ($[COMMA_3] == 'true') #},{# ENDIF #}{# FOR ($[DIRECT_MAP_ALIASES]) IN ($[DIRECT_MAP_ALIAS]) SEP = ', ' #}"$[DIRECT_MAP_ALIAS]":v.$[DIRECT_MAP_ALIAS]{# ENDFOR #} {# ENDIF #}})

    return data;

$[TGT_ALIAS]_STATE = $[TGT_ALIAS].updateStateByKey(updateState)
{# IF ($[UPDATES_ONLY] == 'true'#}
$[TGT_ALIAS]_STATE = $[TGT_ALIAS]_STATE.join($[TGT_ALIAS])
$[TGT_ALIAS] = $[TGT_ALIAS]_STATE.map(lambda (K, G):G[0])
{# ELSE #}
$[TGT_ALIAS] = $[TGT_ALIAS]_STATE.map(lambda (K, G):G)
{# ENDIF #}

{# ELSE #}

$[TGT_ALIAS] = $[TGT_ALIAS].map(lambda (K, G):(K,[G, datetime.now()]))

def updateState (v, s):
  {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print "Current value"
  print(v);
  print "State"
  print(s);
  {# ENDIF #}
  if (s is None) or not s:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "State is null"
    {# ENDIF #}
    return v[0];
  current = datetime.now();
  duration = current - s[1];
  {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print "Timestamp"
  print(duration.seconds)
  {# ENDIF #}
  if (v is None) or not v:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "Current value is null"
    {# ENDIF #}
    if duration.seconds > $[RETENTION_PERIOD]:
       {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
       print "Retention period exceeded"
       {# ENDIF #}
       return None
    else:
       return s;
  else:
    {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print "Merging current value and state"
    {# ENDIF #}
    v = v[0][0];
    s = s[0];
    data = Row(**{{# IF ($[GROUP_BY_ALIASES] != 'null') #}{# FOR ($[GROUP_BY_ALIASES]) IN ($[GROUP_BY_ALIAS]) SEP = ', ' #}"$[GROUP_BY_ALIAS]":v.$[GROUP_BY_ALIAS]{# ENDFOR #}{# ENDIF #}
    {# IF ($[SIMPLE_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_1] == 'true') #},{# ENDIF #}{# FOR ($[SIMPLE_AGGR_FUNCS],$[SIMPLE_AGGR_ALIASES]) IN ($[SIMPLE_AGGR_FUNC],$[SIMPLE_AGGR_ALIAS]) SEP = ', ' #}"$[SIMPLE_AGGR_ALIAS]":{# IF ($[SIMPLE_AGGR_FUNC] == 'COUNT') #}$[SIMPLE_AGGR_FUNC]_STATE{# ELSE #}$[SIMPLE_AGGR_FUNC]{# ENDIF #}([v.$[SIMPLE_AGGR_ALIAS], s.$[SIMPLE_AGGR_ALIAS]]){# ENDFOR #}{# ENDIF #}
    {# IF ($[COMPLEX_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_2] == 'true') #},{# ENDIF #}{# FOR ($[COMPLEX_AGGR_ALIASES]) IN ($[COMPLEX_AGGR_ALIAS]) SEP = ', ' #}"$[COMPLEX_AGGR_ALIAS]":v.$[COMPLEX_AGGR_ALIAS]{# ENDFOR #}{# ENDIF #}
    {# IF ($[DIRECT_MAP_ALIASES] != 'null') #}{# IF ($[COMMA_3] == 'true') #},{# ENDIF #}{# FOR ($[DIRECT_MAP_ALIASES]) IN ($[DIRECT_MAP_ALIAS]) SEP = ', ' #}"$[DIRECT_MAP_ALIAS]":v.$[DIRECT_MAP_ALIAS]{# ENDFOR #} {# ENDIF #}})

    return [data, datetime.now()];

$[TGT_ALIAS]_STATE = $[TGT_ALIAS].updateStateByKey(updateState)
{# IF ($[UPDATES_ONLY] == 'true'#}
$[TGT_ALIAS]_STATE = $[TGT_ALIAS]_STATE.join($[TGT_ALIAS])
$[TGT_ALIAS] = $[TGT_ALIAS]_STATE.map(lambda (K, G):G[0][0])
{# ELSE #}
$[TGT_ALIAS] = $[TGT_ALIAS]_STATE.map(lambda (K, G):G[0])
{# ENDIF #}

{# ENDIF #}

{# ELSE #}

$[TGT_ALIAS] = $[TGT_ALIAS].map(lambda (K, G):Row(**{{# IF ($[GROUP_BY_ALIASES] != 'null') #}{# IF ($[GROUP_BY_ALIASES.size()] == '1') #}"$[GROUP_BY_ALIASES.get(0)]":K{# ELSE #}{# FOR ($[GROUP_BY_ALIASES], $[GROUP_BY_INDICES]) IN ($[GROUP_BY_ALIAS], $[GROUP_BY_INDEX]) SEP = ', ' #}"$[GROUP_BY_ALIAS]":K[$[GROUP_BY_INDEX]]{# ENDFOR #}{# ENDIF #}{# ENDIF #}
{# IF ($[SIMPLE_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_1] == 'true') #},{# ENDIF #}{# FOR ($[SIMPLE_AGGR_FUNCS],$[SIMPLE_AGGR_ALIASES]) IN ($[SIMPLE_AGGR_FUNC],$[SIMPLE_AGGR_ALIAS]) SEP = ', ' #}"$[SIMPLE_AGGR_ALIAS]": $[SIMPLE_AGGR_FUNC](map((lambda row: row.$[SIMPLE_AGGR_ALIAS]), G)) {# ENDFOR #}{# ENDIF #}
{# IF ($[COMPLEX_AGGR_ALIASES] != 'null') #}{# IF ($[COMMA_2] == 'true') #},{# ENDIF #}{# FOR ($[COMPLEX_AGGR_FUNCS],$[COMPLEX_AGGR_ALIASES]) IN ($[COMPLEX_AGGR_FUNC],$[COMPLEX_AGGR_ALIAS]) SEP = ', ' #}"$[COMPLEX_AGGR_ALIAS]": $[COMPLEX_AGGR_FUNC]{# ENDFOR #}{# ENDIF #}
{# IF ($[DIRECT_MAP_ALIASES] != 'null') #}{# IF ($[COMMA_3] == 'true') #},{# ENDIF #}{# FOR ($[DIRECT_MAP_ALIASES]) IN ($[DIRECT_MAP_ALIAS]) SEP = ', ' #}"$[DIRECT_MAP_ALIAS]": map((lambda row: row.$[DIRECT_MAP_ALIAS])  ,G){# ENDFOR #} {# ENDIF #}}));

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
print("========= %s   : $[TGT_ALIAS] final map =========" % type($[TGT_ALIAS]).__name__)
{# IF ($[STREAMING_MODE] == 'true')#}
$[TGT_ALIAS].pprint()
{# ELSE #}
for line in $[TGT_ALIAS].collect():
    print line
{# ENDIF #}
{# ENDIF #}

{# ENDIF #}
{# INCLUDE = 'SparkPartitionRedistributeAndSort' #}
{# ENDIF #}

  ]]></Field>
	<Field name="TemplateVersion" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[794b7215-9b77-4601-89df-27a212adda73]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[142]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[61c3c8f0-eb25-415b-9465-5faedfc806fd]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[172]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[76db4b46-ddac-4406-8b78-47fda4d51755]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[173]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[df390c7a-d62a-4c74-b15c-d7b29e6bb27e]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[147]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[18e2b03f-7223-49e3-8b24-743b307467f6]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[146]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[f147a306-846d-4f50-b650-455220e973e0]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[161]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[b82fd314-f84d-418e-913a-1a773320ce89]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[144]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[b94569b9-4fe2-4086-b5d9-3cd739031608]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[137]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[b5bfaaaa-1ea2-4f30-af2c-cd88d864067e]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[140]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[9142a0ad-fb7d-442d-9052-c44a5a679d35]]></Field>
	<Field name="ISnpKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[130]]></Field>
	<Field name="ISnpTrt" type="com.sunopsis.sql.DbInt"><![CDATA[142]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.130]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e622-2d00-11e6-9419-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkGroupCmd]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[13]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.142]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[97fe9946-a4d5-4618-a15a-8d5b13a74326]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkPartitionRedistributeAndSort]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[33]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.172]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[a77950f0-a905-4991-98c6-d46e415581d9]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkGroupCmdDF]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[15]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.173]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[0519558e-4d77-490a-bacb-69b2a2b2fad5]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkPartitionRedistributeAndSortDF]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[35]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.147]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[28C4768839C04BAEE053CCC0E40AAAF7]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Cassandra]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[22]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.146]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[1FD1D82B9F005A53E053CCC0E40AC733]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to SQL]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[16]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.161]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[310d86cf-27e0-48c0-ae73-82685449bcce]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[IKM Spark Table Function]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[24]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.144]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[dabbcab5-caeb-423c-b6f2-bfb106747464]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Kafka]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[18]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.137]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[1986feab-eca2-4f5a-96a8-ecf827ac7cda]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to File]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.140]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[2B7D95B0B8A32C45E053E603C40A5DCB]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to HDFS]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.142]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[c2f113d5-e22b-4237-b25c-545872875536]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[LKM Spark to Hive]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[11]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.08]]></Field>
</Object>
</SunopsisExport>
